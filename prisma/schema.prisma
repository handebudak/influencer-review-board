// CreatorHub - Influencer Brand Deal Review Platform
// Database schema for reviewing brand deal submissions

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(REVIEWER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts  Account[]
  sessions  Session[]
  items     Item[]
  auditLogs AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
enum UserRole {
  ADMIN
  REVIEWER
  VIEWER
}

enum ItemStatus {
  NEW
  IN_REVIEW
  APPROVED
  REJECTED
}

enum RiskLevel {
  LOW      // 0-30
  MEDIUM   // 31-60
  HIGH     // 61-100
}

model Item {
  id                  String     @id @default(cuid())
  title               String
  description         String     @db.Text
  amount              Float
  influencerName      String     @map("influencer_name")
  influencerHandle    String     @map("influencer_handle")
  followers           Int
  engagementRate      Float      @map("engagement_rate")
  storyEngagementRate Float      @map("story_engagement_rate")
  avgLikes            Int        @map("avg_likes")
  brandName           String     @map("brand_name")
  status              ItemStatus @default(NEW)
  riskScore           Int?       @map("risk_score")
  riskLevel           RiskLevel? @map("risk_level")
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")
  createdBy           User       @relation(fields: [createdById], references: [id])
  createdById         String     @map("created_by_id")

  auditLogs AuditLog[]

  @@index([status])
  @@index([riskLevel])
  @@index([createdAt])
  @@map("items")
}

model Rule {
  id          String   @id @default(cuid())
  name        String
  description String
  condition   String   @db.Text // JSON string of condition
  scoreImpact Int      @map("score_impact") // Points to add/subtract
  isActive    Boolean  @default(true) @map("is_active")
  priority    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("rules")
}

enum AuditAction {
  CREATED
  UPDATED
  STATUS_CHANGED
  SCORE_CALCULATED
  DELETED
}

model AuditLog {
  id        String      @id @default(cuid())
  itemId    String      @map("item_id")
  userId    String      @map("user_id")
  action    AuditAction
  changes   String      @db.Text // JSON string of changes
  oldValue  String?     @map("old_value") @db.Text
  newValue  String?     @map("new_value") @db.Text
  createdAt DateTime    @default(now()) @map("created_at")

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}
